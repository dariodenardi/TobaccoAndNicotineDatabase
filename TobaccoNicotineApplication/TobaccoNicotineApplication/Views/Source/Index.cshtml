@using TobaccoNicotineApplication.Utilities
@using System.ComponentModel.DataAnnotations

@model TobaccoNicotineApplication.Models.Source

@{
    ViewBag.Title = "Index";
    ViewBag.PageTitle = "Source";
    ViewBag.TitlePrincipal = "List of Sources";
}

@{
    string phaseCode = StaticName.PhaseCode();
    string phaseName = StaticName.PhaseName();
    string number = StaticName.Number();
    string variableName = StaticName.VariableName();
    string unitName = StaticName.MeasurementUnitName();
    string varLc = StaticName.VarLc();
    string pmiCoding = StaticName.PmiCoding();
    string continentCode = StaticName.ContinentCode();
    string regionCode = StaticName.RegionCode();
    string continentName = StaticName.ContinentName();
    string regionName = StaticName.RegionName();
    string countryCode = StaticName.CountryCode();
    string countryName = StaticName.CountryName();
    string areaCode = StaticName.AreaCode();
    string year = StaticName.Year();
    string value = StaticName.Value();
    string notes = StaticName.CurrencyNote();
    string data = StaticName.Data();
    string dataUs = StaticName.DataUs();
    string exchangeRateUs = StaticName.ExchangeRateUS();
    string internalNotes = StaticName.InternalNotes();
    string publicNotes = StaticName.PublicNotes();
    string sourceName = StaticName.SourceName();
    string sourceDate = StaticName.UploadDate();
    string sourceTime = StaticName.UploadTime();
    string sourceLink = StaticName.Link();
    string sourceRepository = StaticName.Repository();
    string sourceDateDownload = StaticName.DownloadDate();
    string sourceUsername = StaticName.UserName();
}

@section styles {
    <!-- Plugin -->
    @Styles.Render("~/Content/colorpicker")

    <!-- Sweet Alert -->
    @Styles.Render("~/Content/sweetalert")

    <!-- Chosen -->
    <link rel="stylesheet" href="//cdn.jsdelivr.net/chosen/1.1.0/chosen.css">

    <!-- Dropzone css -->
    @Styles.Render("~/Content/dropzone")
}

<div class="panel-group panel-group-joined" id="accordion-region">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a id="collapseTitleOne" data-toggle="collapse" data-parent="#accordion-region" href="#collapseOne">
                    Filter
                </a>
            </h4>
        </div>
        <div id="collapseOne" class="panel-collapse collapse in">
            <div class="panel-body">
                <!--Filter-->
                <dl class="dl-horizontal">
                    <dt>
                        @Html.Label(pmiCoding, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="pmiCodeString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(continentName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="continentNameString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(regionName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="regionNameString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(countryName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="countryNameString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(continentCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="IdContinentString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(regionCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="IdRegionString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(countryCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="IdCountryString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(areaCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="areaCodeString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(year, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="yearString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(number, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="numberString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(variableName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="variableNameString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(phaseCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="phaseCodeString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(phaseName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="phaseNameString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(varLc, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="varLcString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceNameString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceDate, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceDateString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceTime, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceTimeString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceLink, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceLinkString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceRepository, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceRepositoryString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceDateDownload, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceDateSourceString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(sourceUsername, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="sourceUsernameString" onchange="" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>
                </dl>

                <button type="submit" class="btn btn-primary waves-effect" onclick='FilterValue()'>Filter</button>
                <!--Filter-->
            </div>
        </div>
    </div>
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a id="collapseTitleTwo" data-toggle="collapse" data-parent="#accordion-region" href="#collapseTwo" class="collapsed">
                    Rows
                </a>
            </h4>
        </div>
        <div id="collapseTwo" class="panel-collapse collapse">
            <div class="panel-body">

            </div>
        </div>
    </div>

    @if (User.IsInRole("Admin") || @User.IsInRole("Writer"))
    {
        <div class="panel panel-primary">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a id="collapseTitleTree" data-toggle="collapse" data-parent="#accordion-region" href="#collapseTree" class="collapsed">
                        Upload files
                    </a>
                </h4>
            </div>
            <div id="collapseTree" class="panel-collapse collapse">
                <div class="panel-body">


                    <form action="/" enctype="multipart/form-data" method="POST">
                        <div class="dropzone" id="my-dropzone" name="mainFileUploader">
                            <div class="fallback">
                                <input name="file" type="file" multiple />
                            </div>
                        </div>
                    </form>

                </div>
            </div>
        </div>
    }
</div>

@section scripts {
    <!-- Pagination  -->
    @Scripts.Render("~/Scripts/pagination")

    <!-- Chosen  -->
    <script src="//cdn.jsdelivr.net/chosen/1.1.0/chosen.jquery.js"></script>

    <!-- Sweet-Alert  -->
    @Scripts.Render("~/Scripts/sweetalert")

    <!-- Dropzone js -->
    @Scripts.Render("~/Scripts/dropzone")

    <script>
        var boolAdmin = '@User.IsInRole("Admin")';
        var boolWriter = '@User.IsInRole("Writer")';
        var boolReader = '@User.IsInRole("Reader")';

        // ValidateAntiForgeryTokenOnAllPosts
        var token = $('[name=__RequestVerificationToken]').val();

        // carico script quando finisce di caricare la pagina
        $('document').ready(function () {

            // Scelta combobox
            $('.chosen-select').chosen();

        });

        Dropzone.options.myDropzone = {
            paramName: "file",
            autoProcessQueue: true,
            parallelUploads: 1,
            maxFiles: 150,
            acceptedFiles: "image/*,text/csv,application/pdf,text/plain,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation",
            maxFilesize: 20, //MB
            addRemoveLinks: true,
            headers: { "__RequestVerificationToken": token },
            success: function (file, response) {

                if (response.status == true) {
                    file.previewElement.classList.add("dz-success");
                    // Remove the file preview.
                    this.removeFile(file);
                }
                else {
                    // se file esiste
                    if (response.filePath != null) {
                        //Warning Message
                        swal({
                            title: "There is a file, do you want to delete it?",
                            text: "File name: " + file.name,
                            type: "warning",
                            showCancelButton: true,
                            confirmButtonClass: 'btn-warning',
                            confirmButtonText: "Yes, delete it!",
                            closeOnConfirm: false
                        }, function () {

                            // invio richiesta per cancellare il file
                            $.post('/Source/DeleteFile', { filePath: response.filePath + "/" + file.name  }).then(res => {
                                // risultato della risposta
                                if (res == true) {
                                    // invio di nuovo la richiesta
                                    this.uploadFile(file);
                                } else {
                                    swal("An error has occurred!", "Please wait a few minutes and try again.", "error");
                                }
                            });

                        });
                        return;
                    }

                    file.previewElement.classList.add("dz-error");
                    $(file.previewElement).addClass("dz-error").find('.dz-error-message').text(response.response);
                }
            },
            error: function (file, errorMessage, xhr) {

                // Trigger an error on submit
                view.onSubmitComplete({
                    file: file,
                    xhr: xhr
                });

                // Allow file to be reuploaded !
                file.previewElement.classList.add("dz-error");
                file.status = Dropzone.QUEUED;
                // this.cancelUpload(file);
                // this.disable();
                // this.uploadFile(file);

            },

            init: function () {
                this.on("addedfile", function (file) {
                    // prevent duplicate
                    if (this.files.length) {
                        var _i, _len;
                        for (_i = 0, _len = this.files.length; _i < _len - 1; _i++) // -1 to exclude current file
                        {
                            if (this.files[_i].name === file.name && this.files[_i].size === file.size && this.files[_i].lastModifiedDate.toString() === file.lastModifiedDate.toString()) {
                                this.removeFile(file);
                            }
                        }
                    }

                });

                this.on("removedfile", function (file) {
                    // Only files that have been programmatically added should
                    // have a url property.

                });

            },
            url: "/Source/LoadSource"
        };
    </script>
}