@using TobaccoNicotineApplication.Utilities
@using System.ComponentModel.DataAnnotations

@model TobaccoNicotineApplication.Models.Value

@{
    ViewBag.Title = "Index";
    ViewBag.PageTitle = "Values";
    ViewBag.TitlePrincipal = "List of Values";

    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem
    {
        Text = "20",
        Value = "20"
    });
    listItems.Add(new SelectListItem
    {
        Text = "30",
        Value = "30",
    });
    listItems.Add(new SelectListItem
    {
        Text = "40",
        Value = "40"
    });
}

@{
    string phaseCode = StaticName.PhaseCode();
    string phaseName = StaticName.PhaseName();
    string number = StaticName.Number();
    string variableName = StaticName.VariableName();
    string unitName = StaticName.MeasurementUnitName();
    string varLc = StaticName.VarLc();
    string pmiCoding = StaticName.PmiCoding();
    string continentCode = StaticName.ContinentCode();
    string regionCode = StaticName.RegionCode();
    string continentName = StaticName.ContinentName();
    string regionName = StaticName.RegionName();
    string countryCode = StaticName.CountryCode();
    string countryName = StaticName.CountryName();
    string areaCode = StaticName.AreaCode();
    string year = StaticName.Year();
    string value = StaticName.Value();
    string notes = StaticName.CurrencyNote();
    string data = StaticName.Data();
    string dataUs = StaticName.DataUs();
    string exchangeRateUs = StaticName.ExchangeRateUS();
    string internalNotes = StaticName.InternalNotes();
    string publicNotes = StaticName.PublicNotes();
    string nomismaCode = StaticName.NomismaCode();

    StringLengthAttribute publicNotesLenAttr = typeof(TobaccoNicotineApplication.Models.Value).GetProperty("PublicNotes").GetCustomAttributes(typeof(StringLengthAttribute), false).Cast<StringLengthAttribute>().SingleOrDefault();
    StringLengthAttribute internalNotesLenAttr = typeof(TobaccoNicotineApplication.Models.Value).GetProperty("InternalNotes").GetCustomAttributes(typeof(StringLengthAttribute), false).Cast<StringLengthAttribute>().SingleOrDefault();
}

@section styles {
    <!-- Plugin -->
    @Styles.Render("~/Content/colorpicker")

    <!-- Sweet Alert -->
    @Styles.Render("~/Content/sweetalert")

    <!-- Chosen -->
    <link rel="stylesheet" href="//cdn.jsdelivr.net/chosen/1.1.0/chosen.css">
}

<div class="panel-group panel-group-joined" id="accordion-value">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a id="collapseTitleOne" data-toggle="collapse" data-parent="#accordion-value" href="#collapseOne">
                    Filter
                </a>
            </h4>
        </div>
        <div id="collapseOne" class="panel-collapse collapse in">
            <div class="panel-body">
                <!--Filter-->
                <dl class="dl-horizontal">
                    <dt>
                        @Html.Label(pmiCoding, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="pmiCodingString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(continentName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="continentNameString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(regionName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="regionNameString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(countryName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="countryNameString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(continentCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="continentCodeString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(regionCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="regionCodeString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(countryCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="countryCodeString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(areaCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="areaCodeString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(year, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="yearString" onchange="loadFilterCountry()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(number, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="numberString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(variableName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="variableNameString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(phaseName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="phaseNameString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(phaseCode, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="phaseCodeString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(varLc, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="varLcString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>

                    <dt>
                        @Html.Label(unitName, new { @class = "control-label col-md-2" })
                    </dt>

                    <dd>
                        <select id="measurementUnitString" onchange="loadFilterVariable()" class="form-control chosen-select" multiple="multiple"></select>
                    </dd>
                </dl>

                <button type="submit" class="btn btn-primary waves-effect" onclick='FilterValue()'>Filter</button>
                <!--Filter-->
            </div>
        </div>
    </div>
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h4 class="panel-title">
                <a id="collapseTitleTwo" data-toggle="collapse" data-parent="#accordion-value" href="#collapseTwo" class="collapsed">
                    Rows
                </a>
            </h4>
        </div>
        <div id="collapseTwo" class="panel-collapse collapse">
            <div class="panel-body">
                <!--Table-->
                <button type="button" class="btn btn-default" onclick="toggle2()">Select/Deselect All</button>
                <button type="button" class="btn btn-default" onclick="Copy()">Copy to Clipboard</button>
                @if (User.IsInRole("Admin") || User.IsInRole("Writer"))
                {
                    <button type="button" class="btn btn-default" onclick="Paste()">Paste from Clipboard</button>
                }
                <br />
                <div class="col-lg-12">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th width="5%"></th>
                                    <th width="10%">@countryName <img id="idSortable1" src="~/Images/Sortable/bg.png" alt="bg" onclick="SortableName()" style="width:auto;"></th>
                                    <th width="10%">@variableName <img id="idSortable2" src="~/Images/Sortable/bg.png" alt="bg" onclick="SortableVariableName()" style="width:auto;"></th>
                                    <th width="10%">@data <img id="idSortable3" src="~/Images/Sortable/bg.png" alt="bg" onclick="SortableData()" style="width:auto;"></th>
                                    <th width="10%">@dataUs</th>
                                    <th width="10%">@year <img id="idSortable4" src="~/Images/Sortable/bg.png" alt="bg" onclick="SortableYear()" style="width:auto;"></th>
                                    <th width="10%">@exchangeRateUs</th>
                                    <th width="10%">@publicNotes <img id="idSortable5" src="~/Images/Sortable/bg.png" alt="bg" onclick="SortablePublicNotes()" style="width:auto;"></th>
                                    <th width="10%">@internalNotes <img id="idSortable6" src="~/Images/Sortable/bg.png" alt="bg" onclick="SortableInternalNotes()" style="width:auto;"></th>
                                    <th width="5%"></th>
                                    <th width="10%"></th>
                                </tr>
                            </thead>
                            <tbody id="SetValueList"></tbody>
                            <tr id="LoadingStatus"></tr>
                        </table>
                    </div>

                    <div style="display: inline-grid">
                        @Html.Label("Show entries", new { @class = "control-label" })
                        @Html.DropDownList("showEntry", listItems, new { @class = "form-control", @onchange = "FilterValue(0)" })
                    </div>
                    @if (User.IsInRole("Admin") || User.IsInRole("Writer"))
                    {
                        <br />
                        <br />
                        <button type="button" class="btn btn-success" onclick="AddNewValue()">Add New Value</button>
                    }
                    @if (User.IsInRole("Admin"))
                    {
                        <button type="button" class="btn btn-danger" onclick="deleteRows()">Delete Value/s</button>
                    }
                    <br />
                    <br />
                    <div class="col-md-12 text-center">
                        <!--<ul class="pagination pagination-lg pager" id="myPager"></ul>-->
                        <ul class="pagination m-b-5" id="myPager"></ul>
                    </div>
                </div>
                <!--Table-->
            </div>
        </div>
    </div>
</div>

@*Create A Popup Modal For Add*@

<div class="modal fade" id="MyModal">
    <div class="modal-dialog" style="width:55%">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 id="ModalTitle"></h4>
            </div>

            <div class="modal-body">
                <!-- Start panel -->
                <div class="col-lg">
                    <div class="panel panel-default panel-success">
                        <div class="panel-heading">
                            <h4 class="panel-title" id="PanelTitleAddEditDetails"></h4>
                        </div>
                        <div class="panel-body">
                            <!-- Start form -->
                            <form id="form">
                                <fieldset id="SubmitForm">

                                    <dl class="dl-horizontal">
                                        <dt>
                                            @Html.Label(countryName, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            <select class="form-control" id="countryList" onchange="findCountryCode()"></select>
                                        </dd>

                                        <dt>
                                            @Html.Label(countryCode, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.CountryCode, new { htmlAttributes = new { @id = "CountryCode", @class = "form-control", @placeholder = "Insert " + countryCode + "*", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.CountryCode, "", new { @class = "text-danger" })
                                        </dd>

                                        <dt>
                                            @Html.Label(variableName, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            <select class="form-control" id="variableList" onchange="findVariableNumber()"></select>
                                        </dd>

                                        <dt>
                                            @Html.Label(number, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @id = "Number", @class = "form-control", @placeholder = "Insert " + number + "*", @readonly = "readonly" } })
                                            @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                                        </dd>

                                        <dt>
                                            @Html.Label(year, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.Year, new { htmlAttributes = new { @id = "Year", @class = "form-control", @placeholder = "Insert " + year + "*" } })
                                            @Html.ValidationMessageFor(model => model.Year, "", new { @class = "text-danger" })
                                        </dd>

                                        <dt>
                                            @Html.Label(nomismaCode, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.NomismaCode, new { htmlAttributes = new { @id = "NomismaCode", @class = "form-control", @placeholder = "Insert " + nomismaCode + "*" } })
                                            @Html.ValidationMessageFor(model => model.NomismaCode, "", new { @class = "text-danger" })
                                        </dd>

                                        <dt>
                                            @Html.Label(data, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.Data, new { htmlAttributes = new { @id = "Data", @class = "form-control", @placeholder = "Insert " + data } })
                                            @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
                                        </dd>

                                        <dt>
                                            @Html.Label(publicNotes, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.PublicNotes, new { htmlAttributes = new { @id = "publicNotes", @class = "form-control", @placeholder = "Insert " + publicNotes } })
                                            @Html.ValidationMessageFor(model => model.PublicNotes, "", new { @class = "text-danger" })
                                        </dd>

                                        <dt>
                                            @Html.Label(internalNotes, new { @class = "control-label col-md-2" })
                                        </dt>

                                        <dd>
                                            @Html.EditorFor(model => model.InternalNotes, new { htmlAttributes = new { @id = "InternalNotes", @class = "form-control", @placeholder = "Insert " + internalNotes } })
                                            @Html.ValidationMessageFor(model => model.InternalNotes, "", new { @class = "text-danger" })
                                        </dd>
                                    </dl>

                                </fieldset>
                            </form>
                            <!-- End form -->
                        </div>
                    </div>
                </div>
                <!-- End panel -->
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="r">Cancel</button>
                <button type="button" class="btn btn-success" id="CreateValue">Save</button>
            </div>

        </div>
    </div>
</div>

@*Create A PopUp Modal For DeleteConfirmation*@

<div class="modal fade" id="DeleteConfirmation">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4>There is an operation to be performed...</h4>
            </div>

            <div class="modal-body">
                <!-- Start panel -->
                <div class="col-lg-12">
                    <div class="panel panel-fill panel-danger">
                        <div class="panel-heading">
                            <h4 class="panel-title" id="PanelTitleDelete"></h4>
                        </div>
                        <div class="panel-body">
                            Are you sure you want to delete this Record/s?
                        </div>
                    </div>
                </div>
                <!-- End panel -->
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal" id="r">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="ConfirmDelete()">Confirm</button>
            </div>

        </div>
    </div>
</div>

@section scripts {
    <!-- Pagination  -->
    @Scripts.Render("~/Scripts/pagination")

    <!-- Chosen  -->
    <script src="//cdn.jsdelivr.net/chosen/1.1.0/chosen.jquery.js"></script>

    <!-- Plugins js -->
    @Scripts.Render("~/Scripts/colorpicker")
    @Scripts.Render("~/Scripts/maxlength")

    <!-- Sweet-Alert  -->
    @Scripts.Render("~/Scripts/sweetalert")

    <!-- Bootstrap File Style -->
    @Scripts.Render("~/Scripts/filestyle")

    <script>
        var boolAdmin = '@User.IsInRole("Admin")' == "True";
        var boolWriter = '@User.IsInRole("Writer")' == "True";
        var boolReader = '@User.IsInRole("Reader")' == "True";

        var publicNotesMax = '@publicNotesLenAttr.MaximumLength';
        var internalNotesMax = '@internalNotesLenAttr.MaximumLength';
    </script>

    @Scripts.Render("~/Scripts/value")
}